[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "addrnorm"
version = "0.1.0"
description = "Address Normalizer Monorepo"
authors = [
    { name = "Your Name", email = "your@email.com" }
]
license = { file = "LICENSE" }
readme = "README.md"
requires-python = ">=3.8"
dependencies = [
    "pytest",
    "jsonschema",
    "fastapi",
    "uvicorn[standard]",
    "pydantic",
    "pyyaml",
    "unicodedata2",
    "spacy>=3.4.0",
    "scikit-learn>=1.0.0",
    "numpy>=1.21.0",
    "tqdm>=4.64.0"
]

[tool.setuptools.packages.find]
where = ["src"]

[tool.black]
# Code formatting configuration
line-length = 127
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 127
target-version = "py38"

[tool.ruff.lint]
select = ["E", "F", "W", "I", "N"]
ignore = [
    "E402",  # Module level import not at top of file (needed for path manipulation)
    "E203",  # whitespace before ':'
]

[tool.ruff.lint.isort]
force-single-line = false
known-first-party = ["addrnorm"]
known-third-party = ["pytest", "pydantic", "pandas"]

[tool.mypy]
# Type checking configuration
python_version = "3.8"
disallow_untyped_defs = true
ignore_missing_imports = true
explicit_package_bases = true
mypy_path = "src"
warn_return_any = true
warn_unused_configs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pandas.*",
    "psutil.*",
    "faker.*",
    "spacy.*",
    "sklearn.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
# Test discovery and execution
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Minimum version
minversion = "7.0"

# Additional options
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--maxfail=5",
    "--durations=10",
    "--color=yes",
    "--cov=src/addrnorm",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80"
]

# Test markers
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "benchmark: Performance benchmark tests",
    "slow: Slow running tests",
    "network: Tests requiring network access",
    "memory: Memory intensive tests",
    "timeout: Tests with custom timeout"
]

# Timeout settings
timeout = 300
timeout_method = "thread"

# Filtering
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

# Test output
console_output_style = "progress"
junit_family = "xunit2"

[tool.coverage.run]
# Coverage configuration
source = ["src/addrnorm"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/site-packages/*",
    "*/venv/*",
    "*/virtualenv/*",
    "*/.tox/*",
    "*/build/*",
    "*/dist/*"
]

[tool.coverage.report]
# Coverage reporting
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

ignore_errors = true
show_missing = true
precision = 2
skip_covered = false
skip_empty = true

[tool.coverage.html]
directory = "htmlcov"
title = "Address Normalization Test Coverage"

[tool.coverage.xml]
output = "coverage.xml"

[project.scripts]
addrnorm-preprocess = "addrnorm.preprocess.cli:main"

[project.urls]
Homepage = "https://github.com/yourname/address-normalizer"
