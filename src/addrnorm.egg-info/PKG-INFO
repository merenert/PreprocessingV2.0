Metadata-Version: 2.4
Name: addrnorm
Version: 0.1.0
Summary: Address Normalizer Monorepo
Home-page: https://github.com/merenert/PreprocessingV2.0
Author: Meren Ertugrul
Author-email: Your Name <your@email.com>
License: MIT License

        Copyright (c) 2025 Your Name

        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:

        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.

        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.

Project-URL: Homepage, https://github.com/yourname/address-normalizer
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: pytest
Requires-Dist: jsonschema
Requires-Dist: fastapi
Requires-Dist: uvicorn[standard]
Requires-Dist: pydantic
Requires-Dist: pyyaml
Requires-Dist: unicodedata2
Requires-Dist: spacy>=3.4.0
Requires-Dist: scikit-learn>=1.0.0
Requires-Dist: numpy>=1.21.0
Requires-Dist: tqdm>=4.64.0
Dynamic: author
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python

# Turkish Address Normalization Tool (addrnorm)

> Advanced Turkish address normalization using ML and rule-based methods.

## Features

- **ML-powered NER**: spaCy-based named entity recognition (94.6% F-score)
- **Rule-based Fallback**: Pattern matching and heuristic extraction
- **Geographic Validation**: 81 cities + 897 districts with fuzzy matching
- **Multiple Output Formats**: JSON Lines, CSV
- **Parallel Processing**: Batch processing with configurable concurrency
- **Command Line Interface**: Easy-to-use CLI with rich help and examples

## Architecture

```mermaid
graph TD
    A[Raw Address] -->|Preprocess| B(Clean Text)
    B --> C{Pattern Match}
    C -->|High Confidence| G[Structured Address]
    C -->|Low Confidence| D(ML NER Model)
    D -->|Success| E(Validation)
    D -->|Failed| F(Rule-based Fallback)
    F --> E
    E --> G
    G --> H(Output Format)
    H --> I[JSONL/CSV Output]
```

## Quick Start

### Installation

```bash
# Clone repository
git clone https://github.com/merenert/PreprocessingV2.0
cd PreprocessingV2.0

# Install dependencies
pip install -r requirements.txt

# Install CLI tool
pip install -e .
```

### Basic Usage

```bash
# Normalize a single address
addrnorm normalize --address "Atatürk Mahallesi Cumhuriyet Caddesi No:15 Çankaya/Ankara"

# Process a file of addresses
addrnorm normalize --in addresses.txt --out results.jsonl

# Export to CSV format
addrnorm normalize --in data.txt --out output.csv --format csv

# Parallel processing with metrics
addrnorm normalize --in large_file.txt --out results.jsonl --jobs 4 --metrics stats.json
```

### Advanced Usage

```bash
# Show detailed help
addrnorm normalize --help

# Verbose output with processing details
addrnorm normalize --in data.txt --out results.jsonl --verbose --stats

# Custom ML model and thresholds
addrnorm normalize --in data.txt --out results.jsonl \
  --model-path custom_model \
  --pattern-threshold 0.9 \
  --ml-threshold 0.8

# Disable certain processing stages
addrnorm normalize --in data.txt --out results.jsonl --no-ml --no-validation

# Pretty print single address result
addrnorm normalize --address "Example address" --pretty
```

## Command Reference

### Global Commands

```bash
addrnorm --help              # Show help
addrnorm version             # Show version information
```

### Normalize Command

```bash
addrnorm normalize [OPTIONS]
```

#### Input Options

| Option | Description |
|--------|-------------|
| `--in FILE`, `--input FILE` | Input file containing addresses |
| `--address TEXT` | Single address to normalize |

#### Output Options

| Option | Description |
|--------|-------------|
| `--out FILE`, `--output FILE` | Output file path |
| `--format {jsonl,csv}` | Output format (default: jsonl) |
| `--pretty` | Pretty-print JSON (single address only) |

#### Processing Options

| Option | Description |
|--------|-------------|
| `--jobs N`, `-j N` | Number of parallel jobs (currently disabled) |
| `--batch-size N` | Batch size for processing (default: 100) |
| `--model-path PATH` | Path to ML model |
| `--no-ml` | Disable ML model |
| `--no-validation` | Disable geographic validation |

#### Threshold Configuration

| Option | Description |
|--------|-------------|
| `--pattern-threshold FLOAT` | Pattern matching threshold (default: 0.8) |
| `--ml-threshold FLOAT` | ML confidence threshold (default: 0.7) |

#### Output & Logging

| Option | Description |
|--------|-------------|
| `--metrics FILE` | Save processing metrics to JSON file |
| `--stats` | Show processing statistics |
| `--verbose`, `-v` | Enable verbose output |
| `--quiet`, `-q` | Suppress all output except errors |

## Input Formats

### Text Files
One address per line:
```
Atatürk Mahallesi Cumhuriyet Caddesi No:15 Çankaya/Ankara
Bahçelievler Mah. Eski Edirne Asfaltı Cd. No:674 Bahçelievler/İstanbul
```

### CSV Files
First column treated as addresses:
```csv
address,additional_info
"Kemalpaşa Mahallesi İnönü Caddesi No:23 Seyhan/Adana",sample_data
"Gazi Mahallesi Atatürk Bulvarı No:45 Yenimahalle/Ankara",test_address
```

## Output Formats

### JSON Lines (JSONL)
```json
{"explanation_raw": "Original address", "il": "ANKARA", "ilce": "ÇANKAYA", ...}
{"explanation_raw": "Another address", "il": "İSTANBUL", "ilce": "KADIKÖY", ...}
```

### CSV Format
```csv
explanation_raw,il,ilce,mahalle,sokak,bina_no,daire_no,posta_kodu
"Original address","ANKARA","ÇANKAYA","ATATÜRK","CUMHURIYET CADDESİ","15","","06100"
```

## Processing Methods

The tool uses a multi-stage pipeline:

1. **Preprocessing**: Text cleaning and normalization
2. **Pattern Matching**: Fast regex-based extraction (confidence ≥ 0.8)
3. **ML NER**: spaCy-based named entity recognition (confidence ≥ 0.7)
4. **Rule-based Fallback**: Heuristic extraction for edge cases
5. **Geographic Validation**: City/district consistency checks
6. **Output Formatting**: Structure and export

## Performance

- **Accuracy**: 94.6% F-score on Turkish addresses
- **Speed**: ~7ms per address on standard hardware
- **Throughput**: ~130 addresses/second
- **Success Rate**: 99.9% on real-world data

## Examples

### Single Address Processing

```bash
# Basic normalization
$ addrnorm normalize --address "Gazi Mah. Atatürk Cd. No:123 Ankara"
{"explanation_raw":"Gazi Mah. Atatürk Cd. No:123 Ankara","il":"ANKARA","ilce":"","mahalle":"GAZİ","sokak":"ATATÜRK CADDESİ","bina_no":"123","daire_no":"","posta_kodu":""}

# Pretty printed output
$ addrnorm normalize --address "Gazi Mah. Atatürk Cd. No:123 Ankara" --pretty
{
  "explanation_raw": "Gazi Mah. Atatürk Cd. No:123 Ankara",
  "il": "ANKARA",
  "ilce": "",
  "mahalle": "GAZİ",
  "sokak": "ATATÜRK CADDESİ",
  "bina_no": "123",
  "daire_no": "",
  "posta_kodu": ""
}
```

### Batch Processing

```bash
# Process 1000 addresses with statistics
$ addrnorm normalize --in addresses.txt --out results.jsonl --stats
Processing addresses from: addresses.txt
Output format: jsonl
Writing results to: results.jsonl
Found 1000 addresses to process
Progress: 100.0% (1000/1000)

Processing complete!
Results written to: results.jsonl

============================================================
PROCESSING STATISTICS
============================================================
Total addresses: 1000
Successful: 999
Failed: 1
Success rate: 99.9%
Average confidence: 0.847
Average time per address: 6.8ms
Total processing time: 12.3s
Throughput: 81.3 addresses/second
============================================================
```

### Metrics Export

```bash
# Save detailed metrics
$ addrnorm normalize --in data.txt --out results.jsonl --metrics metrics.json

# metrics.json content:
{
  "input_file": "data.txt",
  "output_file": "results.jsonl",
  "total_addresses": 1000,
  "successful": 999,
  "success_rate": 0.999,
  "average_confidence": 0.847,
  "average_processing_time_ms": 6.8,
  "methods_used": {
    "ml_primary": 892,
    "ml_validation": 45,
    "fallback": 38,
    "pattern": 24
  },
  "timestamp": "2025-08-22 14:30:15"
}
```

## Development

### Project Structure

```
src/addrnorm/
├── ml/                 # ML models and inference
├── patterns/           # Pattern matching
├── fallback/          # Rule-based fallback
├── validate/          # Geographic validation
├── pipeline/          # Processing pipeline
├── preprocess/        # Text preprocessing
└── utils/             # Shared utilities
```

### Running Tests

```bash
# Install development dependencies
pip install -e ".[dev]"

# Run tests
pytest

# Run with coverage
pytest --cov=addrnorm
```

## Output Schema

The normalized address follows this structure:

```json
{
  "explanation_raw": "Original input address",
  "il": "Province (uppercase)",
  "ilce": "District (uppercase)",
  "mahalle": "Neighborhood (uppercase)",
  "sokak": "Street name (uppercase)",
  "bina_no": "Building number",
  "daire_no": "Apartment number",
  "posta_kodu": "Postal code"
}
```

## License

MIT License - see LICENSE file for details.

## Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests
5. Submit a pull request

## Support

For issues and questions:
- GitHub Issues: https://github.com/merenert/PreprocessingV2.0/issues
- Documentation: See README and help commands
